using System;
using System.IO;
using System.IO.Compression;
using AppKit;
using Foundation;
using MetroLive.Services.Offline;

namespace MetroLive.macOS
{
	public partial class ViewController : NSViewController
	{
		public ViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			// Do any additional setup after loading the view.
		}

		public override NSObject RepresentedObject
		{
			get
			{
				return base.RepresentedObject;
			}
			set
			{
				base.RepresentedObject = value;
				// Update the view, if already loaded.
			}
		}
		async partial void StartTest(NSObject sender)
		{
			string path = System.Environment.CurrentDirectory + '/';
			MetroLive.Services.Offline.FileManager fileMgr = new Services.Offline.FileManager(path);

			byte[] msg = {
  0x50, 0x4b, 0x03, 0x04, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 0x73, 0xbc,
  0xef, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74,
  0x78, 0x74, 0x55, 0x58, 0x0c, 0x00, 0x5f, 0x22, 0x6a, 0x59, 0x31, 0x21,
  0x6a, 0x59, 0xf5, 0x01, 0x14, 0x00, 0x0b, 0xc9, 0xc8, 0x2c, 0x56, 0x00,
  0xa2, 0x44, 0x85, 0x92, 0xd4, 0xe2, 0x12, 0x3d, 0x00, 0x50, 0x4b, 0x07,
  0x08, 0x5d, 0xc9, 0xc3, 0xc6, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x50, 0x4b, 0x01, 0x02, 0x15, 0x03, 0x14, 0x00, 0x08, 0x00, 0x08,
  0x00, 0x73, 0xbc, 0xef, 0x4a, 0x5d, 0xc9, 0xc3, 0xc6, 0x0f, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0xa4, 0x81, 0x00, 0x00, 0x00, 0x00, 0x74,
  0x65, 0x73, 0x74, 0x2e, 0x74, 0x78, 0x74, 0x55, 0x58, 0x08, 0x00, 0x5f,
  0x22, 0x6a, 0x59, 0x31, 0x21, 0x6a, 0x59, 0x50, 0x4b, 0x05, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x42, 0x00, 0x00, 0x00, 0x55,
  0x00, 0x00, 0x00, 0x00, 0x00
};
			await fileMgr.WriteBytesToFileAsync("test.zip", msg);

            ZipArchive zip = fileMgr.GetZipFile("test.zip");

            ZipArchiveEntry entry = zip.GetEntry("test.txt");
            using(Stream x = entry.Open())
            {
				StreamReader reader = new StreamReader(x);
				string text = await reader.ReadToEndAsync();
            }

			ZipArchiveEntry entry1 = zip.GetEntry("test.txt");
			using (Stream x = entry1.Open())
			{
				StreamReader reader = new StreamReader(x);
				string text = await reader.ReadToEndAsync();
			}
		}
	}
}
